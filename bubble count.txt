import cv2
import numpy as np
import time

# Parameters
tube_height = 10.0  # cm
tube_diameter = 2.0  # cm
liquid_viscosity = 0.89e-3  # Pa.s
frame_rate = 30  # fps
time_interval = 60  # seconds

# Calculate tube volume
tube_volume = np.pi * (tube_diameter / 2.0) ** 2 * tube_height

# Create a video capture object
cap = cv2.VideoCapture(0)

# Set the video capture resolution
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

# Initialize variables
count = 0
start_time = time.time()

# Loop over frames
while (time.time() - start_time) < time_interval:
    # Read a frame from the video capture
    ret, frame = cap.read()

    if ret:
        # Convert the frame to grayscale
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

        # Threshold the image
        _, thresh = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY)

        # Find contours in the image
        contours, hierarchy = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        # Loop over contours
        for cnt in contours:
            # Calculate the area of the contour
            area = cv2.contourArea(cnt)

            # Calculate the diameter of the bubble
            diameter = np.sqrt(4 * area / np.pi)

            # Calculate the volume of the bubble
            volume = np.pi * (diameter / 2.0) ** 2 * diameter / 3.0

            # Calculate the rate of gas evolution
            rate = volume / tube_volume / liquid_viscosity

            # Increment the count if the rate is above a threshold
            if rate > 0.01:
                count += 1

        # Display the frame
        cv2.imshow('frame', frame)

        # Wait for a key press
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

# Release the video capture object
cap.release()

# Print the bubble count and rate
print(f"Total bubbles: {count}")
print(f"Bubble rate: {count / (time.time() - start_time):.2f} bubbles/second")

# Destroy all windows
cv2.destroyAllWindows()